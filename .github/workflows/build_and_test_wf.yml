name: Build docker image

on:
  push:
  workflow_dispatch:
    inputs:
      rollup_client_ref_name:
        type: string
        description: 'rollup_client branch name to use for building the image'
        required: false
        default: 'main'
  
jobs:
  prepare_env:
    runs-on: ubuntu-22.04-8core-32gb-300
    env:
      OP_GETH_REF_NAME: "${{github.ref_name}}" 
      ROLLUP_CLIENT_REF_NAME: ${{github.rollup_client_ref_name || 'main'}} 
      
    steps:
      - name: 'Checkout rome-rollup-clients repository'
        uses: actions/checkout@main
        with:
          repository: rome-protocol/rome-rollup-clients
          path: rome-rollup-clients
          ref: ${{env.ROLLUP_CLIENT_REF_NAME}}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}
    
      - name: 'Checkout op-geth reposotory'
        uses: actions/checkout@master
        with:
          path: op-geth
          repository: rome-protocol/op-geth
          ref: ${{env.OP_GETH_REF_NAME}}
          token: ${{secrets.GIT_ROLLUP_TOKEN}}
      
      - name: 'Login to Docker Hub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: 'Build op-geth image'
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          file: rome-rollup-clients/op-geth/Dockerfile
          tags: romeprotocol/rollup-op-geth:${{env.OP_GETH_REF_NAME}}
          labels: romeprotocol/rollup-op-geth:${{env.OP_GETH_REF_NAME}}

      - name: 'Set latest tag'
        if: ${{env.ROLLUP_CLIENT_REF_NAME == 'main' && env.OP_GETH_REF_NAME == 'main'}}
        run: |
          docker pull romeprotocol/rollup-op-geth:${{env.OP_GETH_REF_NAME}}
          docker tag romeprotocol/rollup-op-geth:${{env.OP_GETH_REF_NAME}} romeprotocol/rollup-op-geth:latest
          docker push romeprotocol/rollup-op-geth:latest
    
      - name: 'Trigger tests'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GIT_ROLLUP_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'rome-protocol',
              repo: 'tests',
              workflow_id: 'reusable_wf_tests.yml',
              ref: 'add_call',
              inputs: {
                docker_image_tags: JSON.stringify({
                  evm: "latest",
                  apps: "latest",
                  relayer: "latest",
                  geth: process.env.GITHUB_REF_NAME || "main",
                  tests: "latest",
                  uniswap: "latest"
                }),
                tests_list: "evm,spl,state_comparison,uniswap_proxy,uniswap_op_geth"
              }
            });

      - name: 'Echo link to triggered workflow'
        run: |
          echo "Tests triggered in private repo:"
          echo "https://github.com/rome-protocol/tests/actions"
      
      - name: Wait for tests to finish
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GIT_ROLLUP_TOKEN }}
          script: |
            const sleep = ms => new Promise(res => setTimeout(res, ms));
            const owner = 'rome-protocol';
            const repo = 'tests';
            const workflow_id = 'reusable_wf_tests.yml';

            let runId = null;
            const maxAttempts = 6;
            const delayMs = 180000;

            for (let i = 0; i < maxAttempts; i++) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                event: 'workflow_dispatch'
              });

              const latestRun = runs.data.workflow_runs.find(run =>
                run.head_branch === 'add_call' &&
                run.event === 'workflow_dispatch' &&
                run.status !== 'completed'
              );

              if (!latestRun) {
                console.log(`Waiting for workflow run to start... (${i + 1})`);
                await sleep(60000);
                continue;
              }

              runId = latestRun.id;
              console.log(`Found workflow run ID: ${runId}`);
              break;
            }

            if (!runId) {
              core.setFailed('Could not find the triggered workflow run.');
              return;
            }

            for (let i = 0; i < maxAttempts; i++) {
              const { data: run } = await github.rest.actions.getWorkflowRun({
                owner,
                repo,
                run_id: runId
              });

              console.log(`Status: ${run.status}, Conclusion: ${run.conclusion}`);

              if (run.status === 'completed') {
                if (run.conclusion !== 'success') {
                  core.setFailed(`Tests failed: ${run.conclusion}`);
                }
                return;
              }

              await sleep(delayMs);
            }

            core.setFailed('Timed out waiting for tests to complete.');
